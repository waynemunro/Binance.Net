@page "/"
@using Binance.Net.Interfaces
@using Blazor.DataProvider
@using CryptoExchange.Net.Sockets


@inject BinanceDataProvider _dataProvider
@implements IAsyncDisposable


<div>
    Server time : @ServerTime



    <EditForm Model="KlineInterval">
        <InputSelect @bind-Value="KlineInterval" @oninput="@OnUpdated">
            @foreach (var value in Enum.GetValues(typeof(Binance.Net.Enums.KlineInterval)))
            {
                <option>@value</option>
            }
        </InputSelect>
    </EditForm>

    <span>Selected value: @KlineInterval</span>

    <h4>K Line data @TRADE_SYMBOL</h4>
    @foreach (var line in _Klines.TakeLast(2))
    {
        <div>OpenTime : @line.OpenTime</div>
        <div>Base Volume : @line.BaseVolume</div>
        <div>Opening Price : @line.Open</div>
        <div>Highest Price : @line.High</div>
        <div>Lowest Price : @line.Low</div>
        <div>Closing Price : @line.Close</div>
        <div>Trades : @line.TradeCount</div>
        <div>TakerBuyBaseVolume : @line.TakerBuyBaseVolume</div>
        @*<div>Quote Volume : @line.QuoteVolume</div>*@
        <div>CloseTime : @line.CloseTime</div>
        <hr />
    }

    <div>Message : @message</div>
    <div>RSI : @RSI</div>
    <div>Median : @Median</div>
</div>




<div>
    <h3>24h data</h3>
    @foreach (var tick in _ticks.Where(x => x.Symbol.StartsWith("BTC")).OrderByDescending(o => o.PriceChangePercent))
    {
        <div>@tick.Symbol | @tick.PriceChangePercent</div>

    }
</div>

@code
{  

    
}
